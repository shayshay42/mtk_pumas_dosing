
"""
    plotter(sol)

This function generates two plots with time on the x-axis, and the values of doses and cells on the y-axes, respectively.
The data is dynamically adjusted according to the ranges in the provided data `sol`.

# Arguments
- `sol::Array`: A 2D array where the first row corresponds to the cell values, the fifth and eighth rows correspond to the dose values. The time values are stored in `sol.t`.

# Returns
- `Plots.Plot`: A plot object generated by the Plots package, showing two subplots stacked vertically. 

The first subplot ("Zoom for CSF concentrations") has the dose amounts for TMZ in CSF and GDC in the periphery plotted on the left y-axis, and the cell volume plotted on the right y-axis. A line of annotation indicating the final volume is also included.

The second subplot ("Dosing Regimen") has the dose amounts for AbsTMZ, PlaTMZ, CSFTMZ, AbsGDC, PlaGDC, and PeriphGDC plotted on the left y-axis, and the cell volume plotted on the right y-axis.

# Example
```julia
julia> plotter(sol)
"""
function plotter(sol)
    c = sol[1,:]
    fv = round(c[end], digits=4)
    cells = Array(sol)[1:1,:]
    doses = Array(sol)[[5,7],:]
    time = sol.t
  
    dose_min = minimum(transpose(doses))
    dose_max = maximum(transpose(doses))
  
    cell_min = minimum(transpose(cells))
    cell_max = maximum(transpose(cells))
  
    p1 = plot(time./24, transpose(doses), ylims=(dose_min * 0.9, dose_max * 1.1), color = ["#9bcfa0" "#d6818f"], title="Dosing Simulation", linewidth=1, xaxis="time (days)", label=["TMZ in CSF" "Drug in Plasma"], ylabel="Dose Amount (mg)", legend=:topleft)
    p2 = twinx(p1)
    plot!(p2, time./24, transpose(cells), ylims=(cell_min * 0.9, cell_max * 1.1), color = "#81b1d6", linewidth=3, linestyle = :dash, label="C", ylabel="Tumor Volume (ml)", legend=:topright)
  
    mid_x = (maximum(time) - minimum(time))/2 + minimum(time)
    mid_y = (maximum(cells) - minimum(cells))/2 + minimum(cells)
  
    annotate!(mid_x, mid_y, text("\n Final Volume: $fv", :black, :left, 10))
    return p1
end


"""
    spaced_list(p, n, m, b=1)

Create a list of integers where `n` numbers are sequentially appended 
followed by a jump of `m` numbers. This pattern is repeated until 
the end number `p` is reached or surpassed. 

Optionally, the start of the sequence can be adjusted from the 
default of `1` with the `b` parameter.

# Arguments
- `p::Integer`: The final number of the sequence. The function will stop 
  adding numbers to the list once this number is reached or surpassed.
- `n::Integer`: The number of sequential integers to append to the list 
  at a time.
- `m::Integer`: The number of integers to skip in the sequence after 
  each set of `n` integers is added.
- `b::Integer`: (optional) The beginning number of the sequence. Default 
  is `1`.

# Returns
- `Array{Integer}`: An array of integers that follows the specified 
  sequential pattern.

# Example
```julia
julia> spaced_list(20, 2, 3)
[1, 2, 6, 7, 11, 12, 16, 17]
"""
function spaced_list(p, n, m, b=1)
  # Initialize an empty list
  spaced_list = []
  # Initialize a counter variable
  counter = b
  # Use a while loop to iterate through the range of integers
  while counter <= p
    # Append `n` integers spaced by 1 to the list
    for i in 1:n
      spaced_list = [spaced_list; counter]
      counter += 1
      # Check if the counter has reached the end of the range
      if counter > p
        break
      end
    end
    # Add `m` to the counter to create the jump
    counter += m
  end
  return spaced_list
end

